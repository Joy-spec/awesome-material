第一章：对象导论

抽象过程——面向对象程序设计：
	万物皆为对象；
	程序是对象的集合，它们通过发送消息来告知彼此所要做的；
	每个对象都有自己的由其他对象所构成的存储；
	每个对象都拥有其类型；
	某一特定类型的所有对象可以接收同样的消息。

每个对象都有一个接口：
	问题空间的元素和解空间的对象之间创建一对一的映射。
	接口确定了对某一特定对象所发出的请求。

每个对象都提供服务：
	创建或寻找能够提供理想的服务来解决问题的一系列对象。

被隐藏的具体实现：
	访问控制：让客户端程序员无法触及他们不应该触及的部分；允许库设计者可以改变类内部的工作方式而不用担心会影响到客户端程序员。

	public：对任何人都是可用的；
	private：除类型创建者和类型的内部方法之外任何人都不能访问；
	protected：与private相当，继承的类可以访问protected成员，但不能访问private成员；
	默认访问权限：包访问权限，类可以访问在同一个包中的其他类的成员，但是在包之外，这些成员如同指定了private一样。

复用的具体实现：
	最简单的方式：创建一个成员对象。
	组合（聚合），“has-a”拥有关系。在建立新类时，应该首先考虑组合，再考虑继承。

继承：
	基类与导出类产生差异：添加新方法（is-like-a）；覆盖（is-a）。

多态：
	void doSomething(Shape shape){
		shape.erase();
		//...
		shape.draw();
	}
	Circle circle = new Circle();
	Triangle triangle = new Triangle();
	Line line = new Line();
	doSomething(circle);
	doSomething(triangle);
	doSomething(line);

	向上转型（upcasting）。

单根继承结构：
	终极基类：Object。
	保证所有对象都具备某些功能；使垃圾回收器的实现变得容易得多。

容器：
	List、Map、Set...
	不同的容器提供了不同类型的接口和外部行为；不同的容器对于某些操作具有不同的效率。
	参数化类型。

对象的创建和生命周期：
	动态内存分配：new
	垃圾回收机制。

异常处理：
	抛出--捕获
	异常不能被忽略，保证一定会在某处得到处理。
	异常提供了一种从错误状况进行可靠恢复的途径。

并发编程：
	同一时刻处理多个任务的思想。
	Java的并发是内置于语言中的。


第二章:一切都是对象

用引用操纵对象：
	操纵的标识符实际上是对象的一个“引用”。

必须由你创建所有对象：
	一旦创建了一个引用，就希望它能与一个新的对象相关联。new 一下。
	存储到什么地方：寄存器、堆栈、堆、常量存储、非RAM存储。new将对象存储在“堆”里。
	
	基本类型：不用new来创建变量，创建一个并非是引用的“自动”变量，这个变量直接存储“值”，并置于堆栈中，更加高效。
	Java要确定每种基本类型所占存储空间的大小，不随机器硬件架构变化，这是Java更具可移植性的原因之一。
	boolean类型所占所占存储空间大小没有明确指定。
	
java中的数组：
	在C和C++中使用数组是很危险的，因为C和C++中的数组就是内存块。
	Java确保数组会被初始化，而且不能在它的范围之外被访问。这种范围检查，是以每个数组上少量的内存开销及运行时的下标检查为代价的。

永远不要销毁对象：
	由new创建的对象，只要你需要，就会一直保留下去。垃圾回收器自动回收。

基本成员默认值：
	boolean：false;	char：‘\u0000’(null);	byte:(byte)0;	short:(short)0;		int:0;	long:0L;	float:0.0f;	double:0.0d;

static：
	一个static字段对每个类来说都只有一份存储空间，而非static字段则是对每个对象有一个存储空间。
	static方法的一个重要用法就是在不创建任何对象的前提下就可以调用它。这一点对于main()方法很重要。

javadoc命令：
	Javadoc是Sun公司提供的一个技术，它从程序源代码中抽取类、方法、成员等注释形成一个和源代码配套的API帮助文档。也就是说，只要在编写程序时以一套特定的标签作注释，在程序编写完成后，通过Javadoc就可以同时形成程序的开发文档了。
	@author 作者名
	@date 日期
	@version 版本标识
	@parameter 参数及其意义
	@since 最早使用该方法/类/接口的JDK版本
	@return 返回值
	@throws 异常类及抛出条件
	@deprecated 引起不推荐使用的警告
	@see reference 查看引用
	@override 重写

